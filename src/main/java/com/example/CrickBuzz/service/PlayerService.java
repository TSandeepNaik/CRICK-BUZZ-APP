package com.example.CrickBuzz.service;

import com.example.CrickBuzz.converter.PlayerConverter;
import com.example.CrickBuzz.dto.request.PlayerRequest;
import com.example.CrickBuzz.dto.response.PlayerResponse;
import com.example.CrickBuzz.exeptions.PlayerNotFoundException;
import com.example.CrickBuzz.model.Player;
import com.example.CrickBuzz.model.enums.Speciality;
import com.example.CrickBuzz.repository.PlayerRepository;
import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.mail.SimpleMailMessage;
//import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class PlayerService {

    @Autowired
    PlayerRepository playerRepository;

//    @Autowired   // to send the mail
//    JavaMailSender javaMailSender;


    //here data type is player there are some attributes which are autogenerated we are passing the player without those attributes
    //and .save function saving the player along with those autogenerated attributes like our id and time
    public PlayerResponse addPlayer(PlayerRequest playerRequest){
     Player player = PlayerConverter.PlayerDtoToPlayer(playerRequest);
       Player savedPlayer =  playerRepository.save(player);

       //before returning the response will send the mail to player that he registered for the match
//       sendEmail(savedPlayer);

       //but i want to written the player response so we create the separete converter for player responsse
        return PlayerConverter.PlayerToPlayerResponse(savedPlayer);
    }

//    private void sendEmail(Player player) {
//
//        String text = "Congratulation "+player.getName()+" you have successfully registered on crickbuzz potel and your speciality is "+player.getSpeciality();
//        //we have to create the object for this inbuilt class , we are getting this from the java mail sender dependency
//        SimpleMailMessage message = new SimpleMailMessage();
//        message.setFrom("developerbackend2000@gmail.com");
//        message.setTo(player.getEmail());
//        message.setSubject("Registration successfull");
//        message.setText(text);
//
//        javaMailSender.send(message);
//    }

    public List<PlayerResponse> FindPlayerGreaterThenAge(int age){
        List<Player> players = playerRepository.findByAgeGreaterThan(age);
        //for storing the list we need arraylist
        List<PlayerResponse> playerResponses = new ArrayList<>();
        for(Player player:players){
            playerResponses.add(PlayerConverter.PlayerToPlayerResponse(player));//here we need to add player response so traverse in the list get the player and convert to player response
        }
        return playerResponses;
    }

    public List<PlayerResponse> playerByAgeGreaterThanAndSpeciality(int age, Speciality speciality) {
        List<Player> players = playerRepository.playerByAgeGreaterThanAndSpeciality(age, speciality);
        List<PlayerResponse> playerResponses = new ArrayList<>();
        for(Player player:players){
            playerResponses.add(PlayerConverter.PlayerToPlayerResponse(player));//here we need to add player response so traverse in the list get the player and convert to player response
        }
        return playerResponses;
    }

    public Player getPlayer(int playerId) {
       Optional<Player> Optionalplayer = playerRepository.findById(playerId);
        if(Optionalplayer.isEmpty()){
            throw new PlayerNotFoundException("invalid PlayerId");
        }

        return Optionalplayer.get();
    }
}
